buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

plugins {
    id 'org.ajoberstar.github-pages' version '1.6.0'
}

def depVersions = [
        commercetoolsSdkJvm: '1.13.0',
        guava: '19.0',
        hamcrest: '1.3',
        jUnit: '4.12',
        moneta: '1.0',
        slf4jLog4j: '1.7.13'
]

allprojects {
    group = 'com.commercetools'
    // NOTE: please also change the version in com.commercetools.pspadapter.payone.config.PropertyProvider when changing the version
    version = '0.1-SNAPSHOT'

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

subprojects {

    apply plugin: 'java'

    sourceCompatibility = '1.8'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile "com.google.guava:guava:$depVersions.guava"
        compile "com.commercetools.sdk.jvm.core:commercetools-java-client:$depVersions.commercetoolsSdkJvm"
        compile "com.commercetools.sdk.jvm.core:commercetools-models:$depVersions.commercetoolsSdkJvm"
        compile "org.javamoney:moneta:$depVersions.moneta"
        compile "org.slf4j:slf4j-log4j12:$depVersions.slf4jLog4j"

        testCompile "junit:junit:$depVersions.jUnit"
        testCompile "org.hamcrest:hamcrest-core:$depVersions.hamcrest"
        testCompile "org.hamcrest:hamcrest-library:$depVersions.hamcrest"

    }

}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
}

project(":service") {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile 'com.mashape.unirest:unirest-java:1.4.7'
        compile 'com.neovisionaries:nv-i18n:1.17'
        compile('com.sparkjava:spark-core:2.5.4') {
            exclude group: 'org.slf4j', module: 'slf4j-simple'
        }
        compile 'org.apache.httpcomponents:fluent-hc:4.5.1'
        compile 'org.quartz-scheduler:quartz:2.2.2'

        testCompile 'org.assertj:assertj-core:3.3.0'
        testCompile 'org.exparity:hamcrest-date:2.0.1'
        testCompile 'org.mockito:mockito-core:1.10.19'
    }

    shadowJar {
        archiveName = "commercetools-payone-integration.jar"
        manifest {
            attributes 'Main-Class': 'com.commercetools.pspadapter.payone.ServiceFactory'
        }
    }
}

/**
 * Asserts that system properties and environment variables required for running the executable specification are set.
 *
 * @param project the project
 * @param test the test task to assert the configuration for
 *
 * @throws GradleException if any required system property or environment variable is undefined or empty
 */
void assertExecutableSpecRequirements(Project project, Test test) {
    test.systemProperties['concordion.extensions'] =
            'org.concordion.ext.inputstyle.InputStyleExtension,' +
            'org.concordion.ext.runtotals.RunTotalsExtension,' +
            'org.concordion.ext.ParallelRunExtension'

    test.systemProperties['concordion.output.dir'] = project.reporting.baseDir.getAbsolutePath() + "/spec"
    test.systemProperties['concordion.run.threadCount'] = '2.5C' // 2.5 * number of cores

    def propertiesToMap = ['CT_PROJECT_KEY',
                           'CT_CLIENT_ID',
                           'CT_CLIENT_SECRET',
                           'CT_PAYONE_INTEGRATION_URL',

                           'TEST_DATA_VISA_CREDIT_CARD_NO_3DS',
                           'TEST_DATA_VISA_CREDIT_CARD_3DS',
                           'TEST_DATA_3_DS_PASSWORD',
                           'TEST_DATA_SW_BANK_TRANSFER_IBAN',
                           'TEST_DATA_SW_BANK_TRANSFER_BIC',

                           'TEST_DATA_PAYONE_MERCHANT_ID',
                           'TEST_DATA_PAYONE_SUBACC_ID',
                           'TEST_DATA_PAYONE_PORTAL_ID',
                           'TEST_DATA_PAYONE_KEY'
    ]

    propertiesToMap.each { propertyKey ->
        test.environment propertyKey, project.hasProperty(propertyKey) ? project[propertyKey] : System.getenv(propertyKey)
        assertValueIsNotNullOrEmpty(propertyKey, test.getEnvironment())
    }
}

project(":functionaltests") {
    dependencies {
        compile project(":service")

        testCompile 'org.concordion:concordion:1.5.1'
        testCompile 'org.concordion:concordion-input-style-extension:0.1'
        testCompile 'org.concordion:concordion-run-totals-extension:1.0.0'
        testCompile 'org.concordion:concordion-parallel-run-extension:1.0.1'
        testCompile 'org.seleniumhq.selenium:selenium-java:2.53.1'

    }

    compileJava.dependsOn ':service:jar'

    test {
        description 'This task is supposed to run single tests, only.'
    }

    test.doFirst {
        assertExecutableSpecRequirements(project, test)
    }

    task testSpec(type: Test) {
        description 'This task tests the executable Concordion specification.'

        filter {
            includeTestsMatching 'specs.SpecsFixture'
        }
    }

    testSpec.doFirst {
        assertExecutableSpecRequirements(project, testSpec)
    }
}

// Publish build results to github pages settings:

def staticPages = project.copySpec {
    from 'ghpages/' // static content - root index.html page
}

def generatedPages = project.copySpec {
    into 'latest/'
    from 'functionaltests/build/reports/' // test results: both Concordion and loging console outputs
}

githubPages {
    repoUri = 'https://github.com/commercetools/commercetools-payone-integration.git'

    credentials {
        // with GitHub token only HTTPS protocol should be used as a repo Uri
        username = System.getenv('GH_TOKEN')
        password = ''
    }

    pages {
        into '.'
        with staticPages, generatedPages
    }
}

publishGhPages  {
    doLast {
        println "Published results to http://commercetools.github.io/commercetools-payone-integration/"
    }
}

/**
 * Asserts that the map contains a non-null, non-empty value for the given key.
 * @param key the key of the value to be checked
 * @param map the key-value map
 *
 * @throws GradleException if the value is undefined or empty
 */
void assertValueIsNotNullOrEmpty(String key, Map<String, Object> map) {
    def property = map.get(key)
    if ((property == null) || property.isEmpty()) {
        throw new GradleException('Property or environment variable ' + key + ' must not be null or empty.')
    }
}

task stage {
    description 'This task is run by Heroku and generates the service jar including all dependencies.'
    dependsOn ':service:shadowJar'
}

task ciBuild {
    description 'This task is run by Travis. It builds the service and runs its unit tests. In addition it builds the functionaltests.'
    dependsOn ':service:test', ':functionaltests:compileTestJava'
}
