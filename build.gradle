plugins {
    id 'org.ajoberstar.github-pages' version '1.3.2'
}

allprojects {
    group = 'com.commercetools'
    version = '0.1'

    project.buildDir = 'target'
}

subprojects {

    apply plugin: 'java'

    sourceCompatibility = '1.8'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile 'io.sphere.sdk.jvm:sphere-java-client:1.0.0-M22'
        compile 'io.sphere.sdk.jvm:sphere-models:1.0.0-M22'
        compile 'com.google.guava:guava:18.0'

        testCompile 'junit:junit:4.12'
    }

}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}

project(":service") {
    dependencies {
        compile 'com.sparkjava:spark-core:2.3'
        compile 'org.quartz-scheduler:quartz:2.2.2'

        testCompile 'org.mockito:mockito-core:1.10.19'
        testCompile 'org.hamcrest:hamcrest-core:1.3'
        testCompile 'org.hamcrest:hamcrest-library:1.3'
        testCompile 'org.exparity:hamcrest-date:2.0.1'
    }
}

project(":functionaltests") {
    dependencies {
        compile project(":service")

        testCompile 'org.concordion:concordion:1.5.1'
        testCompile 'org.concordion:concordion-input-style-extension:0.1'
        testCompile 'org.hamcrest:hamcrest-core:1.3'
        testCompile 'org.hamcrest:hamcrest-library:1.3'
        testCompile('com.github.tomakehurst:wiremock:1.57') {
            // wiremock uses an old servlet-api version but can cope with a newer one,
            // ensure that the newer version required by sparkjava is used
            exclude group: 'org.mortbay.jetty', module: 'servlet-api'
        }
        testCompile 'org.apache.httpcomponents:fluent-hc:4.5.1'
        testCompile 'com.google.code.gson:gson:2.5'
    }

    test {
        filter {
            includeTestsMatching 'specs.PayoneIntegrationFixture'
        }
        systemProperty 'concordion.output.dir', "$reporting.baseDir/spec"
        systemProperty 'concordion.extensions', 'org.concordion.ext.inputstyle.InputStyleExtension'

        systemProperty 'CT_PROJECT_KEY', project.hasProperty('CT_PROJECT_KEY') ? CT_PROJECT_KEY : System.getenv('CT_PROJECT_KEY')
        systemProperty 'CT_CLIENT_ID', project.hasProperty('CT_CLIENT_ID') ? CT_CLIENT_ID : System.getenv('CT_CLIENT_ID')
        systemProperty 'CT_CLIENT_SECRET', project.hasProperty('CT_CLIENT_SECRET') ? CT_CLIENT_SECRET : System.getenv('CT_CLIENT_SECRET')
        systemProperty 'CRON_NOTATION', project.hasProperty('CRON_NOTATION') ? CRON_NOTATION : System.getenv('CRON_NOTATION')
    }
}

githubPages {
    repoUri = 'git@github.com:sphereio/commercetools-payone-integration.git'

    credentials {
        username = System.getenv('GH_TOKEN')
        password = ''
    }

    pages {
        from 'ghpages'

        into ('latest') {
            from ('functionaltests/target/reports/spec/specs') {
                into 'spec'
            }
        }
    }
}
