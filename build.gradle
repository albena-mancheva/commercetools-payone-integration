buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.2'
    }
}

plugins {
    id 'org.ajoberstar.github-pages' version '1.3.2'
}

def versions = [
        sphereSdkJvm: '1.0.0-M24',
        hamcrest: '1.3'
]

allprojects {
    group = 'com.commercetools'
    version = '0.1-SNAPSHOT'

    project.buildDir = 'target'

    allprojects {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

subprojects {

    apply plugin: 'java'

    sourceCompatibility = '1.8'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile 'com.google.guava:guava:18.0'
        compile "io.sphere.sdk.jvm:sphere-java-client:$versions.sphereSdkJvm"
        compile "io.sphere.sdk.jvm:sphere-models:$versions.sphereSdkJvm"
        compile 'org.javamoney:moneta:1.0'
        compile 'org.slf4j:slf4j-log4j12:1.7.13'

        testCompile 'junit:junit:4.12'
        testCompile "org.hamcrest:hamcrest-core:$versions.hamcrest"
        testCompile "org.hamcrest:hamcrest-library:$versions.hamcrest"
    }

}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}

project(":service") {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile 'com.mashape.unirest:unirest-java:1.4.7'
        compile 'com.neovisionaries:nv-i18n:1.17'
        compile('com.sparkjava:spark-core:2.3') {
            exclude group: 'org.slf4j', module: 'slf4j-simple'
        }
        compile 'org.apache.httpcomponents:fluent-hc:4.5.1'
        compile 'org.quartz-scheduler:quartz:2.2.2'

        testCompile 'org.assertj:assertj-core:3.3.0'
        testCompile 'org.exparity:hamcrest-date:2.0.1'
        testCompile 'org.mockito:mockito-core:1.10.19'
    }
}

/**
 * Asserts that system properties and environment variables required for running the executable specification are set.
 *
 * @param project the project
 * @param test the test task to assert the configuration for
 *
 * @throws GradleException if any required system property or environment variable is undefined or empty
 */
void assertExecutableSpecRequirements(Project project, Test test) {
    test.systemProperties['concordion.extensions'] =
            'org.concordion.ext.inputstyle.InputStyleExtension,' +
            'org.concordion.ext.runtotals.RunTotalsExtension,' +
            'org.concordion.ext.ParallelRunExtension'

    test.systemProperties['concordion.output.dir'] = project.reporting.baseDir.getAbsolutePath() + "/spec"
    test.systemProperties['concordion.run.threadCount'] = '2.5C' // 2.5 * number of cores

    test.environment 'CT_PROJECT_KEY', project.hasProperty('CT_PROJECT_KEY') ? project.CT_PROJECT_KEY : System.getenv('CT_PROJECT_KEY')
    assertValueIsNotNullOrEmpty('CT_PROJECT_KEY', test.getEnvironment())

    test.environment 'CT_CLIENT_ID', project.hasProperty('CT_CLIENT_ID') ? project.CT_CLIENT_ID : System.getenv('CT_CLIENT_ID')
    assertValueIsNotNullOrEmpty('CT_CLIENT_ID', test.getEnvironment())

    test.environment 'CT_CLIENT_SECRET', project.hasProperty('CT_CLIENT_SECRET') ? project.CT_CLIENT_SECRET : System.getenv('CT_CLIENT_SECRET')
    assertValueIsNotNullOrEmpty('CT_CLIENT_SECRET', test.getEnvironment())

    test.environment 'CT_PAYONE_INTEGRATION_URL', project.hasProperty('CT_PAYONE_INTEGRATION_URL') ? project.CT_PAYONE_INTEGRATION_URL : System.getenv('CT_PAYONE_INTEGRATION_URL')
    assertValueIsNotNullOrEmpty('CT_PAYONE_INTEGRATION_URL', test.getEnvironment())

    test.environment 'TEST_DATA_VISA_CREDIT_CARD_NO_3DS', project.hasProperty('TEST_DATA_VISA_CREDIT_CARD_NO_3DS') ? project.TEST_DATA_VISA_CREDIT_CARD_NO_3DS : System.getenv('TEST_DATA_VISA_CREDIT_CARD_NO_3DS')
    assertValueIsNotNullOrEmpty('TEST_DATA_VISA_CREDIT_CARD_NO_3DS', test.getEnvironment())

    test.environment 'TEST_DATA_VISA_CREDIT_CARD_3DS', project.hasProperty('TEST_DATA_VISA_CREDIT_CARD_3DS') ? project.TEST_DATA_VISA_CREDIT_CARD_3DS : System.getenv('TEST_DATA_VISA_CREDIT_CARD_3DS')
    assertValueIsNotNullOrEmpty('TEST_DATA_VISA_CREDIT_CARD_3DS', test.getEnvironment())
}

project(":functionaltests") {
    dependencies {
        compile project(":service")

        testCompile 'org.concordion:concordion:1.5.1'
        testCompile 'org.concordion:concordion-input-style-extension:0.1'
        testCompile 'org.concordion:concordion-run-totals-extension:1.0.0'
        testCompile 'org.concordion:concordion-parallel-run-extension:1.0.1'

    }

    compileJava.dependsOn ':service:jar'

    test {
        description 'This task is supposed to run single tests, only.'
    }

    test.doFirst {
        assertExecutableSpecRequirements(project, test)
    }

    task testSpec(type: Test) {
        description 'This task tests the executable Concordion specification.'

        filter {
            includeTestsMatching 'specs.SpecsFixture'
        }
    }

    testSpec.doFirst {
        assertExecutableSpecRequirements(project, testSpec)
    }
}

def staticPages = project.copySpec {
    from 'ghpages'
}

def generatedPages = project.copySpec {
    into 'latest/spec'
    from 'functionaltests/target/reports/spec'
}

githubPages {
    repoUri = 'git@github.com:commercetools/commercetools-payone-integration.git'

    credentials {
        username = System.getenv('GH_TOKEN')
        password = ''
    }

    pages {
        into '.'
        with staticPages, generatedPages
    }
}

/**
 * Asserts that the map contains a non-null, non-empty value for the given key.
 * @param key the key of the value to be checked
 * @param map the key-value map
 *
 * @throws GradleException if the value is undefined or empty
 */
void assertValueIsNotNullOrEmpty(String key, Map<String, Object> map) {
    def property = map.get(key)
    if ((property == null) || property.isEmpty()) {
        throw new GradleException('Property or environment variable ' + key + ' must not be null or empty.')
    }
}

task stage {
    description 'This task is run by Heroku and generates the service jar including all dependencies.'
    dependsOn ':service:shadowJar'
}

task ciBuild {
    description 'This task is run by Travis. It builds the service and runs its unit tests. In addition it builds the functionaltests.'
    dependsOn ':service:test', ':functionaltests:compileTestJava'
}
